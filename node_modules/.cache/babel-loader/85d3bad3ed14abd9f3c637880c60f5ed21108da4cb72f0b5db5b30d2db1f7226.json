{"ast":null,"code":"var _jsxFileName = \"/Users/shing/Odin/memory-game/src/components/CardContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport baku from '../images/baku.jpg';\nimport bomu from '../images/bomu.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CardContainer(props) {\n  _s();\n  const {\n    handleGameLogic,\n    score,\n    highScore\n  } = props;\n\n  //fill this array of images with images in obj format later\n  // formate {src, title, backgroundColor, backgroundStyle}\n  let images = [{\n    src: baku,\n    title: 'Baku',\n    backgroundColor: 'rgb(255 223 137)',\n    borderStyle: '1px solid rgb(255 223 137)'\n  }, {\n    src: baku,\n    title: 'Baku',\n    backgroundColor: 'rgb(255 223 137)',\n    borderStyle: '1px solid rgb(255 223 137)'\n  }];\n  const [cards, setNewCards] = useState(images);\n  const shuffle = newCards => {\n    for (let i = newCards.length - 1; i > 0; i--) {\n      let randomIdx = Math.floor(Math.random() * i);\n      [newCards[randomIdx], newCards[i]] = [newCards[i], newCards[randomIdx]];\n    }\n  };\n  useEffect(() => {\n    const newCards = [...cards];\n    shuffle(newCards);\n    setNewCards(newCards);\n  }, [score, highScore]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n      card: card,\n      handleGameLogic: handleGameLogic\n    }, card.title, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this))\n  }, void 0, false);\n}\n_s(CardContainer, \"UF6Ev3KQ8ATIVEnrblnyR5bV7n4=\");\n_c = CardContainer;\nexport default CardContainer;\nvar _c;\n$RefreshReg$(_c, \"CardContainer\");","map":{"version":3,"names":["React","useState","useEffect","Card","baku","bomu","CardContainer","props","handleGameLogic","score","highScore","images","src","title","backgroundColor","borderStyle","cards","setNewCards","shuffle","newCards","i","length","randomIdx","Math","floor","random","map","card"],"sources":["/Users/shing/Odin/memory-game/src/components/CardContainer.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Card from './Card'\nimport baku from '../images/baku.jpg'\nimport bomu from '../images/bomu.jpg'\n\nfunction CardContainer(props){\n    const {handleGameLogic, score, highScore} = props;\n\n    //fill this array of images with images in obj format later\n    // formate {src, title, backgroundColor, backgroundStyle}\n    let images = [\n        {\n            src: baku,\n            title: 'Baku',\n            backgroundColor: 'rgb(255 223 137)',\n            borderStyle: '1px solid rgb(255 223 137)'\n        },\n        {\n            src: baku,\n            title: 'Baku',\n            backgroundColor: 'rgb(255 223 137)',\n            borderStyle: '1px solid rgb(255 223 137)'\n        },\n    ]\n\n    const [cards, setNewCards] = useState(images)\n\n    const shuffle = (newCards) => {\n        for (let i = newCards.length - 1; i > 0; i--){\n            let randomIdx = Math.floor(Math.random() * i);\n            [newCards[randomIdx], newCards[i]] = [newCards[i], newCards[randomIdx]]\n        }\n    }\n\n    useEffect (() => {\n        const newCards = [...cards];\n        shuffle(newCards);\n        setNewCards(newCards);\n    }, [score, highScore])\n\n    return (\n        <>\n        {cards.map((card) => (\n            <Card card={card} key={card.title} handleGameLogic={handleGameLogic} />\n        ))}\n        </>\n    )\n}\n\nexport default CardContainer"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,IAAI,MAAM,oBAAoB;AAAA;AAAA;AAErC,SAASC,aAAa,CAACC,KAAK,EAAC;EAAA;EACzB,MAAM;IAACC,eAAe;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGH,KAAK;;EAEjD;EACA;EACA,IAAII,MAAM,GAAG,CACT;IACIC,GAAG,EAAER,IAAI;IACTS,KAAK,EAAE,MAAM;IACbC,eAAe,EAAE,kBAAkB;IACnCC,WAAW,EAAE;EACjB,CAAC,EACD;IACIH,GAAG,EAAER,IAAI;IACTS,KAAK,EAAE,MAAM;IACbC,eAAe,EAAE,kBAAkB;IACnCC,WAAW,EAAE;EACjB,CAAC,CACJ;EAED,MAAM,CAACC,KAAK,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAACU,MAAM,CAAC;EAE7C,MAAMO,OAAO,GAAIC,QAAQ,IAAK;IAC1B,KAAK,IAAIC,CAAC,GAAGD,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAC;MACzC,IAAIE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGL,CAAC,CAAC;MAC7C,CAACD,QAAQ,CAACG,SAAS,CAAC,EAAEH,QAAQ,CAACC,CAAC,CAAC,CAAC,GAAG,CAACD,QAAQ,CAACC,CAAC,CAAC,EAAED,QAAQ,CAACG,SAAS,CAAC,CAAC;IAC3E;EACJ,CAAC;EAEDpB,SAAS,CAAE,MAAM;IACb,MAAMiB,QAAQ,GAAG,CAAC,GAAGH,KAAK,CAAC;IAC3BE,OAAO,CAACC,QAAQ,CAAC;IACjBF,WAAW,CAACE,QAAQ,CAAC;EACzB,CAAC,EAAE,CAACV,KAAK,EAAEC,SAAS,CAAC,CAAC;EAEtB,oBACI;IAAA,UACCM,KAAK,CAACU,GAAG,CAAEC,IAAI,iBACZ,QAAC,IAAI;MAAC,IAAI,EAAEA,IAAK;MAAkB,eAAe,EAAEnB;IAAgB,GAA7CmB,IAAI,CAACd,KAAK;MAAA;MAAA;MAAA;IAAA,QACpC;EAAC,iBACC;AAEX;AAAC,GA1CQP,aAAa;AAAA,KAAbA,aAAa;AA4CtB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}